Q01 -> Pelo principio da comunicação fim-a-fim, entidades no nucleo da rede não podem implementar protocolos de outras camadas, por isso, as aplicacoes rodam apenas em sistemas finais.

Q02 ->	Arq. Cliente/Servidor = Neste modelo o servidor faz papel apenas de servir, jamais faz requisições. O servidor também tem IP fixo e conhecido. O servidor nunca inicia a conexão. O cliente sempre inicia a conexão, tem IP variado (dinamico). Um cliente não se comunica *DIRETAMENTE* com outro cliente. Um cliente faz requisições ao servidor e aguarda a resposta. É mais provavel que haja uma sobrecarga no servidor. Caso o servidor caia, todo o sistema ficará inutilizável. É mais confiável.
	Arq. P2P = Neste modelo, cada usuário pode ser cliente e servidor ao mesmo tempo. Assim, o mesmo pode fazer resquições e também responder requisições quando quiser. Os dados não estão centralizados. Os usuários na rede interagem *DIRETAMENTE* um com o outro. Como cada usuário pode ser um servidor, é menos provável que haja uma sobrecarga na rede. Caso um servidor caia, basta conectar-se a outro usuário e o serviço continuará normalmente. Tende a ser menos confiável.

Q03 ->	Perda de dados = Algumas aplicações podem tolerar perda de dados. Como exemplo podemos usar serviçoes de áudio, como uma chamada no Skype. Por mais que haja alguma pequena falha, provavelmente ainda seria possível entender a mensagem. A perda de dados não comprometeria o funcionamento do aplicativo.
	Temporização = Algumas aplicações exigem um tempo de resposta menor. Como exemplo podemos usar jogos online. Caso haja o famoso 'lag' (atraso na resposta) a experiência de usuário será piorada, pois jogos onlines, normalmente, necessitam de repostas o mais imediatas possíveis.
	Taxa minima de transmissão = Algumas aplicações necessitam de uma minima largura de banda para serem efetivas. Como exemplo podemos usar serviços de Streaming, como Netflix. Uma ampla largura facilita uma grande passagem de dados, garantindo uma reprodução suave, sem atrasos e de alta qualidade, levando a uma ótima experiência de usuário. Mas caso a largura atinga pelo menos o minimo, será possível usar o serviço, mesmo que não seja da melhor forma possível.

*** FAZER PERGUNTA AQUI ***
Q04 ->	Método Post: A entrada é enviada para o servidor no corpo da entidade.
	Método URL: Utiliza o método GET. A entrada é enviada no campo de URL da linha de requisição
	Método Head: Semelhante ao GET, mas não retorna o objeto requisitado, apenas a reposta. Usado em depuração por devs.

Q05 ->	Um proxy HTTP é uma entidade de rede capaz de atender requisições HTTP em nome de um servidor WEB de origem. O usuário configura o navegador (browser) para acessar a WEB via proxy. O proxy passa a intermediar as requisições HTTP, se o proxy tiver o objeto solicitado, ele retorna o objeto ao cliente, senão, solicita o objeto ao servidor de origem, envia o objeto ao cliente e faz uma copia na sua memória cache. Os objetivos do uso do proxy são: reduzir o tempo de resposta para o cliente e evitar sobrecarga do servidor original.
	*** FAZER PERGUNTA AQUI *** 
	O proxy transparente faz a mesma coisa, só que não é necessário que o usuário configure seu navegador. O roteador intecerpta pedidos web e repassa esses pedidos para o proxy, o cliente sempre irá passar por ele sem nenhuma configuração previa.

Q06 ->	O protocolo FTP em sua essência realiza duas conexões, uma para conexão de dados (data connection) e outra para conexão de controle (control connection). A CC é utilizada para trocar comandos de controle, tais como login, listagem de diretórios, mudança de diretórios,etc... Já o DC é usada pra enviar de fato os dados de arquivos. Como os dados de controle e o dados de arquivos são enviados em canais diferentes, o protocolo é considerado controlado fora de banda. As vatagens são: os dados de comando não interferem nos dados do arquivo e vice-versa, maior flexibilidade pois os dados podem ser enviados em diversos modos (binário, ASCII e imagem) e gereciamento de filas pois facilita o controle de várias transferências simultâneas, priorizando-as conforme necessário. As devantagens são: maior dificuldade de implementação, como são duas conexões estabelecidas, pode ser mais dificil de gerenciar e configurar. Menos eficiente pois pode consumir mais recursos do sistema.

Q07 ->	O simple mail transfer protocol (SMTP) é um protocolo de saída de e-mails. Seu funcionamento consiste em um cliente SMTP criar uma conexão com um servidor SMTP ( utiliza TCP). Após isso é realizado alguns cumprimentos do protocolo, como HELO (inicia a sessão), MAIL FROM (indica o remetente), RCPT TO (indica o destinatário) e DATA (indica inicio de transmissao da mensagem). Após indicar o destinatário e a sessão ser iniciada, o cliente SMTP transmite dados para o servidor SMTP, nestes dados temos o cabeçalho do e-mail ( que contem informações do remetente, destinatário, assunto e alguns outros metadados) e o corpo do e-mail. É neste momento que é possível se passar por outra pessoa, pois o SMTP em sua forma mais básica não faz autenticação do remetente. Portanto, basta alguém mal-intencionado preencher manualmente o campo do remetente para que isso ocorra. Após a finalização da mensagem, o cliente SMTP envia um comando de terminação (geralmente "."), o servidor processa a mensagem e pode entrega-la diretamente ao destinatário ou algum outro servidor SMTP. Após isso, o servidor SMTP envia uma resposta ao cliente indicando o status da transação e encerra a conexão.

Q08 ->	O protocolo SMTP é um protocolo bem antigo, mais antigo até que o próprio HTTP, por isso, o mesmo tem alguma caracteristicas bem arcaicas, como restringir o corpo de todas as mensagens ao simples formato ASCII de 7bits. Na época fazia total sentido, pois não se enviava tantos anexos volumosos e nem arquivos com imagens, áudios ou vídeos. Hoje em dia que isto mudou, é necessário usar um conversor. Então os dados binários de multimídia são codificados para ASCII 7bits, passam pelo servidor SMTP e ao chegar no destinatário, passam por uma decodificação para retornar ao binário original.

*** FAZER PERGUNTA ***
Q09 ->	Os protocolos POP e IMAP, diferente do SMTP, são para recebimento de e-mail. Ambos utilizam uma conexão TCP e passam por uma fase de autorização (login). É neste momento que começam as diferenças: o POP tem dois modos, ler-e-apagar ou ler-e-guardar. O primeiro modo o cliente recebe o e-mail do servidor (neste momento o servidor não tem mais o e-mail) e pode acessa-lo normalmente. Pode marcar as mensagens com o comando "dele x" ou não. Após o comando "quit", o cliente apagará as mensagens marcadas com o "dele" localmente. Isso é um problema para usuários que acessam o e-mail de várias máquinas diferentes. Já o ler-e-guardar, fará praticamente a mesma coisa, com a única diferença que o servidor manterá uma cópia para cada dispositivo diferente que se conecte a ele por aquele login e senha. O POP não guarda estados de sessão, a única coisa que é salvo são as mensagens que devem ser apagadas. O IMAP faz uma sincronização com o servidor, ou seja, da para fazer organização com pastas, alterar e-mails e coisas afins, e, ao entrar em outra sessão, as auterações poderão ser vistas, pois o protocolo guarda estado entre sessões. O POP tem implementação mais simples e o IMAP mais complexa. 

Q10 ->	Os servidores raiz DNS são como guardiões da internet. Atualmente totalizam 13 entidades, espalhados pelo mundo todo. Todos tem o mesmo conjunto de dados, garantindo redundancia e resiliencia caso algum servidor venha a cair. O principal objetivo do servidor DNS raiz é responder o servidor DNS local mostrando qual servidor DNS de TLD deve ser contatado (servidor de primeiro nível). Suponha que voce vai acessar o site "www.brasil.edu", o servidor DNS raiz irá indicar qual servidor TLD é responsável pelo ".edu". Após isso, o TLD indicará qual servidor DNS é responsável pelo "www.brasil", por fim, o servidor responsável devolverá o IP de "www.brasil.edu" para o servidor DNS local, que poderá responder a requisição a ele feita.

Q11 ->	A configuração é feita no próprio servidor DNS. O servidor irá guardar um registro PTR (Pointer Record) para mapear o endereço IP a um nome de domínio. O formato do registro acontence da seguinte forma: suponha que seu IP seja 192.168.0.1 e o nome de dominio seja "euaqui.com", no PTR, será guardado de forma inversa e adicionado "in-addr.arpa"(para IPv4) ou "ip6.arpa" (para IPv6) ao fim do do endereço IP, ou seja, 1.0.168.192.in-addr.arpa euaqui.com. Desta forma, ao realizar uma busca por DNS reverso, o servidor irá verificar o PTR correspondente, caso haja, será retornado o domínio, senão, vazio ou alguma mensagem de erro. Esta pratica é usada, por exemplo, para verificar a autenticidade de e-mails e prevenir ataques de phishing ou identificar dipositivos na rede.

Q12 ->	Uma rede P2P pura não tem hierarquia, ou seja, cada nó pode ser cliente e servidor ao mesmo tempo. Também não há um servidor centralizado, maximizando a resiliencia da rede. A rede se organiza de forma automatica, sem necessidade de uma organização detalhada. Tende a ser menos eficiente e menos segura. É mais utilizada para transferencia de arquivos grandes, como filmes, por exemplo. Já uma rede P2P hibrida é uma mistura do que há de bom na cliente-servidor com a P2P pura. Nela cada nó pode ser cliente e servidor ao mesmo tempo, mas também há um servidor centralizado, para otimizar algumas buscas. A organização da rede é feita por um servidor central, por isso, é menos resiliente a falhas. Também é mais eficiente e mais segura. É mais comumente usada por aplicativos de Streaming.

Q13 ->	O protocolo Gnutella funciona da seguinte maneira (algoritmo de inundação com até 15 saltos): 1º -> Alguém solicita algum arquivo na rede, passando especificações desse arquivo (como nome, tamanho, artitas, etc). Após essa solicitação no software Gnutella, o mesmo irá se conectar (usando TCP) com todos os computadores em sua rede e irá solicitar o arquivo, esta mensagem é denominada como "Query". 2º -> Os computadores que receberem a Query irão verificar em seu sistema se possuem o arquivo e irão poder responder der 3 formas. 1ª forma: ele não retornará nenhum mensagem, logo, ficará subentendido que o computador não conseguiu processar a Query. 2ª forma: caso ele consiga processar a Query e não tenha o arquivo, ele irá passar a Query em diante, para todos os outros computadores que estajam conectados com ele. Assim, formando um exército nesta busca. 3ª forma: "Query HIT", isso significa que o computador conseguiu processar a resposta e tem o arquivo buscado. 3º -> Enquanto a Query se espalha pela rede, o solicitante recebe vários "Query HIT" contendo o IP da máquina para uma conexão direta. 4º -> Agora basta que o solicitante escolha qual IP ele quer se conectar (levando alguns critérios em consideração, como por exemplo, velocidade de conexão) e assim possa fazer finalmente o donwload do arquivo desejado. Em resumo, o protocolo Gnutella funciona como um exército de buscadores com o mesmo objetivo a fim de resolver o problema de uma única solicitação. Como o protocolo forma esse "exército", ele tende a fazer buscas mais rápidas (até porque tem mais gente procurando).